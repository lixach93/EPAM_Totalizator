package by.training.lihodievski.final_project.connection;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Savepoint;

public class ProxyConnection implements AutoCloseable {

    private Connection connection;

    ProxyConnection(Connection connection) {
        this.connection = connection;
    }

    void closeConnection() throws SQLException {
        connection.close();
    }

    @Override
    public void close() throws SQLException {
        ConnectionPool.getInstance ().returnConnection (this);
    }


    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return connection.prepareStatement (sql);
    }

    public void setAutoCommit(boolean autoCommit) throws SQLException {
        connection.setAutoCommit (autoCommit);
    }

    public boolean getAutoCommit() throws SQLException {
        return connection.getAutoCommit ();
    }

    public void commit() throws SQLException {
        connection.commit ();
    }

    public void rollback() throws SQLException {
        connection.rollback ();
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return connection.prepareStatement (sql, resultSetType, resultSetConcurrency);
    }

    public Savepoint setSavepoint() throws SQLException {
        return connection.setSavepoint ();
    }

    public Savepoint setSavepoint(String name) throws SQLException {
        return connection.setSavepoint (name);
    }

    public void rollback(Savepoint savepoint) throws SQLException {
        connection.rollback (savepoint);
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return connection.prepareStatement (sql, resultSetType, resultSetConcurrency, resultSetHoldability);
    }


    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return connection.prepareStatement (sql, autoGeneratedKeys);
    }

    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return connection.prepareStatement (sql, columnIndexes);
    }

    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return connection.prepareStatement (sql, columnNames);
    }
}